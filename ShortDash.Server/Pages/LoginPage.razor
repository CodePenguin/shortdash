@page "/loginpage"
@using ShortDash.Core.Interfaces
@using ShortDash.Server.Services
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JSRuntime;

<h3>LoginPage</h3>

<EditForm EditContext="SecureEditContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="input-group">
        <InputText placeholder="Put insecure stuff here..." @bind-Value="Model.InsecureText" />
        <ValidationMessage For="() => Model.InsecureText" />
    </div>

    <div class="input-group">
        <SecureInputText placeholder="Put secure stuff here..." @bind-Value="Model.SecureText" />
        <ValidationMessage For="() => Model.SecureText" />
    </div>
    <button class="btn btn-primary" @onclick="SaveSecureChanges">Save</button>

    <p>
        <SecureText Value="@Model.SecureText" class="bg-warning" />
    </p>

    <p>
        <SecureInputText type="password" placeholder="Password..." @bind-Value="Model.Password" />
    </p>

    <p>
        <SecureText Value="@Model.Password" class="bg-warning" />
    </p>
</EditForm>

@code {
    protected LoginModel Model { get; set; }
    protected EditContext SecureEditContext { get; set; }

    protected override void OnInitialized()
    {

    }

    protected override void OnParametersSet()
    {
        Model = new LoginModel { SecureText = "All your base are belong to us" };
        SecureEditContext = new EditContext(Model);
    }

    public void SaveSecureChanges()
    {
        Console.WriteLine("SaveSecureChanges");
        if (!SecureEditContext.Validate())
        {
            Console.WriteLine("Failed Validation");
            return;
        }
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(Model));
    }

    public class LoginModel
    {
        [Required]
        public string SecureText { get; set; }

        [Required]
        public string InsecureText { get; set; }

        [Required]
        public string Password { get; set; }
    }

}
