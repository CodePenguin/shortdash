@page "/loginpage"
@using ShortDash.Core.Interfaces
@using ShortDash.Server.Services
@using System.Security.Cryptography
@inject IJSRuntime JSRuntime;

<h3>LoginPage</h3>

<textarea rows="10">
@PublicKey
</textarea>

<input type="text" id="AccessTokenText" />
<button @onclick="DecryptIt">Click</button>

<p>
    @CipherText
</p>

<p>
    @Message
</p>

@code {
    [Inject]
    public IEncryptedChannelService<TargetsHub> encryptedChannelService { get; set; }

    [Inject]
    public IKeyStoreService<TargetsHubEncryptedChannelService> keyStore { get; set; }

    public string PublicKey { get; set; }

    public string Message { get; set; } = "N/A";

    public string CipherText { get; set; } = "N/A";

    private string x;

    protected override void OnInitialized()
    {
        using var rsa = RSA.Create();
        rsa.FromXmlString(encryptedChannelService.ExportPublicKey());
        var data = rsa.ExportSubjectPublicKeyInfo();

        x = keyStore.RetrieveKey(false);

        PublicKey = "-----BEGIN PUBLIC KEY-----\n" + Convert.ToBase64String(data) + "\n-----END PUBLIC KEY-----";
    }

    public async void DecryptIt()
    {
        var value = await JSRuntime.InvokeAsync<string>("encrypt", PublicKey);
        CipherText = value;

        using var rsa = RSA.Create();
        rsa.FromXmlString(keyStore.RetrieveKey(false));
        var decryptedBytes = rsa.Decrypt(Convert.FromBase64String(value), RSAEncryptionPadding.Pkcs1);
        var message = System.Text.Encoding.UTF8.GetString(decryptedBytes);

        Message = message;
        StateHasChanged();
    }

}
