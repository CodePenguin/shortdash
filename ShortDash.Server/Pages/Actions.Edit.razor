@page "/actions/{DashboardActionId:int}"
@page "/actions/new"
@using System.Dynamic
@using System.Text.Json
@using ShortDash.Core.Plugins
@inject DashboardService dashboardService
@inject NavigationManager NavigationManagerService
@inject DashboardActionService DashboardActionService

<EditForm EditContext="@ActionEditContext">
    <DataAnnotationsValidator />

    <fieldset>
        <legend>
            Action
            @if (DashboardActionId != 0)
            {
                <button class="btn btn-outline-danger float-right" @onclick=ConfirmDelete>Delete</button>
            }
        </legend>
        <div class="form-group">
            <label for="Title">Title</label>
            <InputText @bind-Value=@DashboardAction.Title class="form-control" id="Title" placeholder="Enter text to display" />
            <ValidationMessage For="() => DashboardAction.Title" />
        </div>
        <div class="form-group">
            <label for="BackgroundColor">Background Color</label>
            <InputColor @bind-Value=@DashboardAction.BackgroundColor class="form-control" id="BackgroundColor" />
            <ValidationMessage For="() => DashboardAction.BackgroundColor" />
        </div>
        <div class="form-group">
            <label for="Icon">Icon</label>
            <InputText @bind-Value=DashboardAction.Icon class="form-control" id="Icon" placeholder="Enter a relative URL path to an image file" />
            <small>An optional image to be displayed for this action.</small>
            <ValidationMessage For="() => DashboardAction.Icon" />
        </div>
        @if (DashboardActionId == 0)
        {
            <div class="form-group disabled">
                <label for="ActionType">Action Type</label>
                <ActionTypeInputSelect @bind-Value="DashboardAction.ActionTypeName" OptionSelected="@ChangeActionTypeName" />
            </div>
        }
        else if (!string.IsNullOrWhiteSpace(ActionAttribute?.Title))
        {
            <div class="form-group disabled">
                <label for="ActionType">Action Type</label>
                <input type="text" class="form-control" value="@ActionAttribute.Title" disabled />
            </div>
        }
    </fieldset>

    @if (ParametersEditContext != null)
    {
        <fieldset>
            <legend>Parameters</legend>
            <FormGenerator EditContext="@ParametersEditContext" FormElementType="typeof(ActionPropertyFormElement)"></FormGenerator>
        </fieldset>
    }

    <div class="float-right">
        <button class="btn btn-secondary" @onclick=CancelChanges>Cancel</button>
        <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
    </div>
</EditForm>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public int DashboardActionId { get; set; }

    private DashboardAction DashboardAction { get; set; }
    private ShortDashActionAttribute ActionAttribute { get; set; }
    private object Parameters { get; set; }

    private EditContext ActionEditContext { get; set; }
    private EditContext ParametersEditContext { get; set; }

    private void CancelChanges()
    {
        NavigationManagerService.NavigateTo($"/actions");
    }

    private async Task ChangeActionTypeName(string actionTypeName)
    {
        await Task.Run(() => RefreshParameters());
    }

    private async void ConfirmDelete()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmDialog.Message), "Are you sure you want to delete this action?");
        parameters.Add(nameof(ConfirmDialog.ConfirmCss), "btn-danger");
        parameters.Add(nameof(ConfirmDialog.ConfirmLabel), "Delete");
        var modal = Modal.Show<ConfirmDialog>("Delete Action", parameters);
        var result = await modal.Result;
        if (result.Cancelled) { return; }
        await dashboardService.DeleteDashboardActionAsync(DashboardAction);
        NavigationManagerService.NavigateTo($"/actions");
    }

    private void RefreshParameters()
    {
        ActionAttribute = DashboardActionService.GetActionAttribute(DashboardAction.ActionTypeName);
        if (ActionAttribute != null && ActionAttribute.ParametersType != null)
        {

            Parameters = JsonSerializer.Deserialize(DashboardAction.Parameters, ActionAttribute.ParametersType);
            ParametersEditContext = new EditContext(Parameters);
        }
        else
        {
            Parameters = null;
            ParametersEditContext = null;
        }
    }

    private async Task LoadDashboardAction()
    {
        DashboardAction = await dashboardService.GetDashboardActionAsync(DashboardActionId);
        ActionEditContext = new EditContext(DashboardAction);

        RefreshParameters();
    }

    private void NewDashboardAction()
    {
        DashboardAction = new DashboardAction { DashboardActionTargetId = 1 };
        ActionEditContext = new EditContext(DashboardAction);

        ActionAttribute = null;
        Parameters = null;
        ParametersEditContext = null;

        RefreshParameters();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (DashboardActionId > 0)
        {
            await LoadDashboardAction();
        }
        else
        {
            await Task.Run(() => NewDashboardAction());
        }
    }

    private async void SaveChanges()
    {
        if (!ActionEditContext.Validate()) return;

        if (DashboardAction.DashboardActionId == 0 && string.IsNullOrWhiteSpace(DashboardAction.ActionTypeName)) { return; }

        if (ParametersEditContext != null)
        {
            if (!ParametersEditContext.Validate()) return;

            DashboardAction.Parameters = JsonSerializer.Serialize(Parameters);
        }

        if (DashboardAction.DashboardActionId == 0)
        {
            await dashboardService.AddDashboardActionAsync(DashboardAction);
        }
        else
        {
            await dashboardService.UpdateDashboardActionAsync(DashboardAction);
        }

        NavigationManagerService.NavigateTo($"/actions");
    }
}