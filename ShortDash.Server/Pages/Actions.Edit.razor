@page "/actions/{DashboardActionId:int}"
@using System.Dynamic
@using System.Text.Json
@using ShortDash.Core.Plugins
@inject DashboardService dashboardService
@inject NavigationManager NavigationManagerService;
@inject DashboardActionService DashboardActionService;

<EditForm EditContext="@ActionEditContext">
    <DataAnnotationsValidator />

    <fieldset>
        <legend>Action</legend>
        <div class="form-group">
            <label for="Title">Title</label>
            <InputText @bind-Value=@DashboardAction.Title class="form-control" id="Title" />
            <ValidationMessage For="() => DashboardAction.Title" />
        </div>
        <div class="form-group">
            <label for="BackgroundColor">Background Color</label>
            <InputColor @bind-Value=@DashboardAction.BackgroundColor class="form-control" id="BackgroundColor" />
            <ValidationMessage For="() => DashboardAction.BackgroundColor" />
        </div>
        <div class="form-group">
            <label for="Icon">Icon</label>
            <InputText @bind-Value=DashboardAction.Icon class="form-control" id="Icon" />
            <ValidationMessage For="() => DashboardAction.Icon" />
        </div>
        @if (!string.IsNullOrWhiteSpace(ShortDashAction?.Title))
        {
            <div class="form-group disabled">
                <label for="ActionType">Action Type</label>
                <input type="text" class="form-control" value="@ShortDashAction.Title" disabled />
            </div>
        }
    </fieldset>

    @if (ParametersEditContext != null)
    {
        <fieldset>
            <legend>Parameters</legend>
            <FormGenerator EditContext="@ParametersEditContext" FormElementType="typeof(ActionPropertyFormElement)"></FormGenerator>
        </fieldset>
    }

    <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
    <button class="btn btn-outline-secondary" @onclick=CancelChanges>Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int DashboardActionId { get; set; }
    private DashboardAction DashboardAction { get; set; }
    private IShortDashAction ShortDashAction { get; set; }
    private object Parameters { get; set; }

    private EditContext ActionEditContext { get; set; }
    private EditContext ParametersEditContext { get; set; }

    private void CancelChanges()
    {
        NavigationManagerService.NavigateTo($"/actions");
    }

    protected override async Task OnParametersSetAsync()
    {
        DashboardAction = await dashboardService.GetDashboardActionAsync(DashboardActionId);
        ActionEditContext = new EditContext(DashboardAction);

        ShortDashAction = DashboardActionService.GetAction(DashboardAction.ActionTypeName);
        if (ShortDashAction != null)
        {
            Parameters = JsonSerializer.Deserialize(DashboardAction.Parameters, ShortDashAction.ParametersType);
            ParametersEditContext = new EditContext(Parameters);
        }
        else
        {
            Parameters = null;
            ParametersEditContext = null;
        }
    }

    private async void SaveChanges()
    {
        if (!ActionEditContext.Validate()) return;

        if (ParametersEditContext != null)
        {
            if (!ParametersEditContext.Validate()) return;

            DashboardAction.Parameters = JsonSerializer.Serialize(Parameters);
        }
        await dashboardService.UpdateDashboardActionAsync(DashboardAction);

        NavigationManagerService.NavigateTo($"/actions");
    }
}