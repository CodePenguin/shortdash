@page "/actions/{DashboardActionId:int}"
@using System.Text.Json
@inject DashboardService dashboardService
@inject NavigationManager NavigationManagerService;
@inject ActionService ActionService;

<EditForm Model=@DashboardAction OnSubmit=@SaveChanges>
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="Title">Title</label>
        <InputText @bind-Value=DashboardAction.Title class="form-control" id="Title" />
        <ValidationMessage For="() => DashboardAction.Title" />
    </div>
    <div class="form-group">
        <label for="BackgroundColor">Background Color</label>
        <InputColor @bind-Value=DashboardAction.BackgroundColor class="form-control" id="BackgroundColor" />
        <ValidationMessage For="() => DashboardAction.BackgroundColor" />
    </div>
    <div class="form-group">
        <label for="Icon">Icon</label>
        <InputText @bind-Value=DashboardAction.Icon class="form-control" id="Icon" />
        <ValidationMessage For="() => DashboardAction.Icon" />
    </div>

    <FormGenerator DataContext="@Parameters"></FormGenerator>

    <input type="submit" value="Submit" class="btn btn-primary" />
    <button class="btn btn-outline-secondary" @onclick=CancelChanges>Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int DashboardActionId { get; set; }
    private DashboardAction DashboardAction { get; set; }
    private object Parameters { get; set; }

    private void CancelChanges()
    {
        NavigationManagerService.NavigateTo($"/actions");
    }

    protected override async Task OnParametersSetAsync()
    {
        DashboardAction = await dashboardService.GetDashboardActionAsync(DashboardActionId);
        var action = ActionService.GetAction(DashboardAction.ActionTypeName);
        Parameters = JsonSerializer.Deserialize(DashboardAction.Parameters, action.ParametersType);
    }

    private async void SaveChanges(EditContext editContext)
    {
        if (!editContext.Validate()) return;
        DashboardAction.Parameters = JsonSerializer.Serialize(Parameters);
        await dashboardService.UpdateDashboardActionAsync(DashboardAction);

        NavigationManagerService.NavigateTo($"/actions");
    }
}