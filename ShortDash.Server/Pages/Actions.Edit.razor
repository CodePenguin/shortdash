@page "/actions/{DashboardActionId:int}"
@using System.Dynamic
@using System.Text.Json
@inject DashboardService dashboardService
@inject NavigationManager NavigationManagerService;
@inject ActionService ActionService;

<EditForm EditContext="@ActionEditContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Title">Title</label>
        <InputText @bind-Value=@DashboardAction.Title class="form-control" id="Title" />
        <ValidationMessage For="() => DashboardAction.Title" />
    </div>
    <div class="form-group">
        <label for="BackgroundColor">Background Color</label>
        <InputColor @bind-Value=@DashboardAction.BackgroundColor class="form-control" id="BackgroundColor" />
        <ValidationMessage For="() => DashboardAction.BackgroundColor" />
    </div>
    <div class="form-group">
        <label for="Icon">Icon</label>
        <InputText @bind-Value=DashboardAction.Icon class="form-control" id="Icon" />
        <ValidationMessage For="() => DashboardAction.Icon" />
    </div>

    <h3>Generated</h3>
    <FormGenerator EditContext="@ParametersEditContext"></FormGenerator>

    <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
    <button class="btn btn-outline-secondary" @onclick=CancelChanges>Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int DashboardActionId { get; set; }
    private DashboardAction DashboardAction { get; set; }
    private object Parameters { get; set; }

    private EditContext ActionEditContext { get; set; }
    private EditContext ParametersEditContext { get; set; }

    private void CancelChanges()
    {
        NavigationManagerService.NavigateTo($"/actions");
    }

    protected override async Task OnParametersSetAsync()
    {
        DashboardAction = await dashboardService.GetDashboardActionAsync(DashboardActionId);
        ActionEditContext = new EditContext(DashboardAction);

        var action = ActionService.GetAction(DashboardAction.ActionTypeName);
        Parameters = JsonSerializer.Deserialize(DashboardAction.Parameters, action.ParametersType);
        ParametersEditContext = new EditContext(Parameters);
    }

    private async void SaveChanges()
    {
        if (!ActionEditContext.Validate()) return;
        if (!ParametersEditContext.Validate()) return;

        DashboardAction.Parameters = JsonSerializer.Serialize(Parameters);
        await dashboardService.UpdateDashboardActionAsync(DashboardAction);

        NavigationManagerService.NavigateTo($"/actions");
    }
}