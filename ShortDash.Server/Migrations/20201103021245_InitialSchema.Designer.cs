// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShortDash.Server.Data;

namespace ShortDash.Server.Migrations
{
    [DbContext(typeof(ServerApplicationDbContext))]
    [Migration("20201103021245_InitialSchema")]
    partial class InitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("ShortDash.Server.Data.ConfigurationSection", b =>
                {
                    b.Property<string>("ConfigurationSectionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigurationSectionId");

                    b.ToTable("ConfigurationSections");
                });

            modelBuilder.Entity("ShortDash.Server.Data.Dashboard", b =>
                {
                    b.Property<int>("DashboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundColorHtmlValue")
                        .HasColumnName("BackgroundColor")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HideLabels")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DashboardId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new
                        {
                            DashboardId = 1,
                            BackgroundColorHtmlValue = "#ffffff",
                            HideLabels = false,
                            Name = "Main"
                        });
                });

            modelBuilder.Entity("ShortDash.Server.Data.DashboardAction", b =>
                {
                    b.Property<int>("DashboardActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundColorHtmlValue")
                        .HasColumnName("BackgroundColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("DashboardActionTargetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSignature")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Parameters")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToggleBackgroundColorHtmlValue")
                        .HasColumnName("ToggleBackgroundColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToggleIcon")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToggleLabel")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ToggleState")
                        .HasColumnType("INTEGER");

                    b.HasKey("DashboardActionId");

                    b.HasIndex("DashboardActionTargetId");

                    b.ToTable("DashboardActions");
                });

            modelBuilder.Entity("ShortDash.Server.Data.DashboardActionTarget", b =>
                {
                    b.Property<string>("DashboardActionTargetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSignature")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeenDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LinkedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Platform")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicKey")
                        .HasColumnType("TEXT");

                    b.HasKey("DashboardActionTargetId");

                    b.ToTable("DashboardActionTargets");

                    b.HasData(
                        new
                        {
                            DashboardActionTargetId = "000000",
                            LastSeenDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LinkedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ShortDash Server",
                            Platform = "Windows"
                        });
                });

            modelBuilder.Entity("ShortDash.Server.Data.DashboardCell", b =>
                {
                    b.Property<int>("DashboardCellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DashboardActionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DashboardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.HasKey("DashboardCellId");

                    b.HasIndex("DashboardActionId");

                    b.HasIndex("DashboardId");

                    b.ToTable("DashboardCells");
                });

            modelBuilder.Entity("ShortDash.Server.Data.DashboardDevice", b =>
                {
                    b.Property<string>("DashboardDeviceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSignature")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceClaims")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeenDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LinkedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("DashboardDeviceId");

                    b.ToTable("DashboardDevices");
                });

            modelBuilder.Entity("ShortDash.Server.Data.DashboardSubAction", b =>
                {
                    b.Property<int>("DashboardActionChildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DashboardActionParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.HasKey("DashboardActionChildId", "DashboardActionParentId");

                    b.HasIndex("DashboardActionParentId");

                    b.ToTable("DashboardSubActions");
                });

            modelBuilder.Entity("ShortDash.Server.Data.DashboardAction", b =>
                {
                    b.HasOne("ShortDash.Server.Data.DashboardActionTarget", "DashboardActionTarget")
                        .WithMany()
                        .HasForeignKey("DashboardActionTargetId");
                });

            modelBuilder.Entity("ShortDash.Server.Data.DashboardCell", b =>
                {
                    b.HasOne("ShortDash.Server.Data.DashboardAction", "DashboardAction")
                        .WithMany()
                        .HasForeignKey("DashboardActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShortDash.Server.Data.Dashboard", "Dashboard")
                        .WithMany("DashboardCells")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShortDash.Server.Data.DashboardSubAction", b =>
                {
                    b.HasOne("ShortDash.Server.Data.DashboardAction", "DashboardActionChild")
                        .WithMany("DashboardSubActionParents")
                        .HasForeignKey("DashboardActionChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShortDash.Server.Data.DashboardAction", "DashboardActionParent")
                        .WithMany("DashboardSubActionChildren")
                        .HasForeignKey("DashboardActionParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
