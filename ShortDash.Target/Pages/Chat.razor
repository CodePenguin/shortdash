@page "/chat"
@using ShortDash.Target.Services
@using System.Timers
@implements IDisposable
@inject TargetHubService targetHubService;

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button @onclick="Refresh">Refresh</button>

@if (targetHubService.IsConnected())
{
    <h3 class="text-success">Connected</h3>
}
else
{
    <h3 class="text-danger">@targetHubService.ConnectionStatus()</h3>
}

<p>
    Last Manual Refreshed: @LastRefresh
</p>
<p>
    Last Message Received: @LastMessageReceived
</p>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private Timer timer;
    public DateTime LastRefresh { get; set; }
    public DateTime LastMessageReceived { get; set; }

    protected override void OnInitialized()
    {
        targetHubService.OnReceiveMessage += ReceivedMessageEvent;
        targetHubService.OnReconnected += TargetHubStatusChangeEvent;
        targetHubService.OnReconnecting += TargetHubStatusChangeEvent;

        timer = new Timer(1000);
        timer.Elapsed += (sender, args) => InvokeAsync(Refresh);
        timer.Enabled = false;
    }

    public void ReceivedMessage(string user, string message)
    {
        LastMessageReceived = DateTime.Now;
        var encodedMsg = $"{user}: {message}";
        messages.Add(encodedMsg);
        if (messages.Count > 10)
        {
            messages.Clear();
        }
        StateHasChanged();
    }

    public void ReceivedMessageEvent(object sender, MessageArgs args)
    {
        InvokeAsync(() => ReceivedMessage(args.User, args.Message));
    }

    public void TargetHubStatusChangeEvent(object sender, EventArgs args)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void Refresh()
    {
        LastRefresh = DateTime.Now;
        Console.WriteLine($"Refreshing {LastRefresh}");
        StateHasChanged();
    }

    void Send() => targetHubService.Send(userInput, messageInput);

    public bool IsConnected => targetHubService.IsConnected();

    public void Dispose()
    {
        timer.Dispose();
        targetHubService.OnReceiveMessage -= ReceivedMessageEvent;
    }
}
